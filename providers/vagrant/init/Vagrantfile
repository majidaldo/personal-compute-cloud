# -*- mode: ruby -*-
# # vi: set ft=ruby :

system("sh -c 'cd ..; ./setup.sh'")

CLOUD_CONFIG_PATH = File.join(File.dirname(__FILE__), "user-data.yaml")
CONFIG = File.join(File.dirname(__FILE__), "config.rb")


ENV["VAGRANT_DETECTED_OS"] = ENV["VAGRANT_DETECTED_OS"].to_s + " cygwin"




# Defaults for config options defined in CONFIG
$num_instances = 1
$instance_name_prefix = "initcore"
$update_channel = "alpha"
$enable_serial_logging = false
$share_home = false
$vm_gui = false
$vm_memory = 512
$vm_cpus = 1
$shared_folders = {}
$forwarded_ports = {}

if File.exist?(CONFIG)
  require CONFIG
end

# Use old vb_xxx config variables when set
def vm_gui
  $vb_gui.nil? ? $vm_gui : $vb_gui
end

def vm_memory
  $vb_memory.nil? ? $vm_memory : $vb_memory
end

def vm_cpus
  $vb_cpus.nil? ? $vm_cpus : $vb_cpus
end

Vagrant.configure("2") do |initconfig|

  #idk what this does
  if Vagrant.has_plugin?("vagrant-winnfsd")
    initconfig.winnfsd.uid = 1
    initconfig.winnfsd.gid = 1
  end  
  
  
  # always use Vagrants insecure key
  initconfig.ssh.insert_key = false

  initconfig.vm.box = "coreos-%s" % $update_channel
  initconfig.vm.box_version = ">= 308.0.1"
  initconfig.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant.json" % $update_channel

  ["vmware_fusion", "vmware_workstation"].each do |vmware|
    initconfig.vm.provider vmware do |v, override|
      override.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant_vmware_fusion.json" % $update_channel
    end
  end

  initconfig.vm.provider :virtualbox do |v|
    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
  end

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    initconfig.vbguest.auto_update = false
  end

  (1..$num_instances).each do |i|
    initconfig.vm.define vm_name = "%s-%02d" % [$instance_name_prefix, i] do |config|
      #name in cloud-config
      #initconfig.vm.hostname = vm_name

      if $enable_serial_logging
        logdir = File.join(File.dirname(__FILE__), "log")
        FileUtils.mkdir_p(logdir)

        serialFile = File.join(logdir, "%s-serial.txt" % vm_name)
        FileUtils.touch(serialFile)

        ["vmware_fusion", "vmware_workstation"].each do |vmware|
          initconfig.vm.provider vmware do |v, override|
            v.vmx["serial0.present"] = "TRUE"
            v.vmx["serial0.fileType"] = "file"
            v.vmx["serial0.fileName"] = serialFile
            v.vmx["serial0.tryNoRxLoss"] = "FALSE"
          end
        end

        initconfig.vm.provider :virtualbox do |vb, override|
          vb.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
          vb.customize ["modifyvm", :id, "--uartmode1", serialFile]
        end
      end

      if $expose_docker_tcp
        initconfig.vm.network "forwarded_port", guest: 2375, host: ($expose_docker_tcp + i - 1), auto_correct: true
      end

      $forwarded_ports.each do |guest, host|
	initconfig.vm.network "forwarded_port", guest: guest, host: host, auto_correct: true
      end

      ["vmware_fusion", "vmware_workstation"].each do |vmware|
        initconfig.vm.provider vmware do |v|
          v.gui = vm_gui
          v.vmx['memsize'] = vm_memory
          v.vmx['numvcpus'] = vm_cpus
        end
      end

      initconfig.vm.provider :virtualbox do |vb|
        vb.gui = vm_gui
        vb.memory = vm_memory
        vb.cpus = vm_cpus
      end
      ip = "172.17.1.#{i+100}"
      #vagrant halt; vagrant up fixes the ip issue!!
      initconfig.vm.network :private_network, ip: ip#, type: "dhcp"
      # Uncomment below to enable NFS for sharing the host machine into the coreos-vagrant VM.
      initconfig.vm.synced_folder ENV["SRC_DIR_HST"], ENV["SRC_DIR_GST"], id: "core", :nfs => true,  :mount_options   => ['nolock,vers=3,udp'], disabled: false
      #ugg only mounting one folder :/
      initconfig.vm.synced_folder ".", 'vagrant', disabled: true
      
      $shared_folders.each_with_index do |(host_folder, guest_folder), index|
        initconfig.vm.synced_folder host_folder.to_s, guest_folder.to_s, id: "core-share%02d" % index, nfs: true, mount_options: ['nolock,vers=3,udp']
      end

      if $share_home
        initconfig.vm.synced_folder ENV['HOME'], ENV['HOME'], id: "home", :nfs => true, :mount_options => ['nolock,vers=3,udp'], disabled: true
      end

      if File.exist?(CLOUD_CONFIG_PATH)
        initconfig.vm.provision :file, :source => "#{CLOUD_CONFIG_PATH}", :destination => "/tmp/vagrantfile-user-data"
        initconfig.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
        #why do i have to write this??
        #config.vm.provision :shell, :inline => "sudo coreos-cloudinit --from-file /var/lib/coreos-vagrant/vagrantfile-user-data", :privileged => true
      end

    end
  end
end
