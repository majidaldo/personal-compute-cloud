---

#cloud-config


write_files:

  - path: /etc/hosts
    permissions: 755
    content: |
      $REGISTRY_WHOST registry

  - path: /home/core/sys.env
    permissions: 666
    content: |
      REGISTRY_HOST==
      WEAVE_CIDR='net:${WEAVE_MANL_ADD}/${WEAVE_MANL_BIT} net:${WEAVE_AUTO_ADD}/${WEAVE_AUTO_BIT}'
      NFS_SERVER==

  - path: /etc/profile.d/sys_env.sh
    permissions: 755
    content: |
      #!/bin/sh
      while read env; do
          eval export $env
      done <  /home/core/sys.env
      #docker env . theres a 'export' here. eval $(export ...)
      eval $(/opt/bin/weave env)
      if grep -Fxq "DOCKER_HOST*" /home/core/sys.env
      then
      :
      else 
      :
      #echo DOCKER_HOST=$DOCKER_HOST >> /home/core/sys.env
      fi


  - path: /home/core/fwd.sh
    permissions: 755
    content: |      
      #!/bin/sh
      pr=$1
      si=$2
      sp=$3
      di=$4
      dp=$5
      /usr/sbin/iptables -t nat -A PREROUTING \
      -p $pr \
      -d $si \
      --dport $sp \
      -j DNAT --to-destination ${di}\
      :${dp}

  
  - path: /etc/systemd/system/docker.service.d/50-insecure-registry-mirr.conf
    content: |
      [Service]
      EnvironmentFile=/home/core/sys.env
      Environment="DOCKER_OPTS=\
      --insecure-registry=${WEAVE_MANL_ADD}/${WEAVE_MANL_BIT} \
      --insecure-registry=${REGISTRY_HOST} \
      --registry-mirror=http://${REGISTRY_HOST}"
  
  - path: /etc/systemd/system/docker.service.d/50-insecure-registry.conf
    content: |
      [Service]
      EnvironmentFile=/home/core/sys.env
      Environment='DOCKER_OPTS=\
      --insecure-registry=${WEAVE_MANL_ADD}/${WEAVE_MANL_BIT} \
      --insecure-registry=${REGISTRY_HOST}'
      
      
  - path: /home/core/waitforfile.sh
    permissions: 755
    content: |
      #!/bin/sh
      #bc systemd sucks!
      cd ~
      #gets the file name as an argument
      while [ ! -f $1 ]
      do
         sleep .1
      done

  

      
coreos:

  update:
    reboot-strategy: 'off' #hah yaml parser changes this to false w/o "
    #..which is not a valid choice for coreos
  
  fleet:
    public-ip: $public_ip
#    metadata: "loc=local , role=init"

  etcd2:
    discovery: ${DISCOVERY_URL}
    advertise-client-urls: http://$public_ip:2379
    initial-advertise-peer-urls: http://$public_ip:2380
    listen-client-urls: http://0.0.0.0:2379
    listen-peer-urls: http://$public_ip:2380


  units:

    - name: docker.service
      command: start
    - name: etcd2.service
      command: start
    - name: fleet.service
      command: start
    - name: docker-tcp.socket #docker socket already active??
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker Socket for the API
        
        [Socket]
        ListenStream=2375
        Service=docker.service
        BindIPv6Only=both
        
        [Install]
        WantedBy=sockets.target

    - name: 10-weave.network
      runtime: false
      content: |
        [Match]
        Type=bridge
        Name=weave*

        [Network]
    - name: install-weave.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Install Weave
        Documentation=http://zettio.github.io/weave/
        Requires=network-online.target docker.service 
        After=   network-online.target docker.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/bin/mkdir -p /opt/bin/
        ExecStartPre=/usr/bin/curl \
        --silent \
        --location \
        https://github.com/weaveworks/weave/releases/download/${WEAVE_SRCVER}/weave \
        --output /opt/bin/weave
        ExecStartPre=/usr/bin/chmod a+x /opt/bin/weave
        ExecStart=/bin/echo Weave Installed
    - name: weave.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Weave Network
        Documentation=http://zettio.github.io/weave/
        After=install-weave.service
        Requires=install-weave.service
        
        [Service]
        ExecStartPre=/opt/bin/weave launch \
        --init-peer-count 1 \
        --ipalloc-default-subnet ${WEAVE_AUTO_NET} \
        -iprange ${WEAVE_MANL_NET}
        ExecStart=/usr/bin/docker logs -f weave
        SuccessExitStatus=2
        ExecStop=/opt/bin/weave stop
        
    - name: weaveconnect.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=expose weave svcs
        After=   weave.service
        Requires=weave.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/opt/bin/weave connect someserver

        
    - name: weaveexpose.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=expose weave svcs
        After=   weaveconnect.service
        Requires=weaveconnect.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/opt/bin/weave expose

      
    - name: stuffregistry.service
      command: start
      enable: true
      content: |
        [Unit]
        After=registry.service
        Requires=registry.service
        Description=stuff registry with useful images
            
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        EnvironmentFile=/home/core/sys.env
        ExecStartPre=${PROJECT_DIR}/docker/build.sh
        ExecStart=/bin/echo 'bootstrapped registry'
        
       
        
    - name: projectfiles.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=gets project files
        Requires=network-online.target 
        After=   network-online.target 

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        EnvironmentFile=/home/core/sys.env
        ExecStartPre=-/usr/bin/mkdir -p ${PROJECT_DIR}
        ExecStart=/usr/bin/mount -v -o ${NFS_OPTS} \
        ${NFS_SERVER}:${NFS_SHARE} ${PROJECT_DIR}
        ExecStop=/usr/bin/umount ${PROJECT_DIR}


    - name: loadregimg.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=loads docker registry image
        After=projectfiles.service docker.service
        Requires=projectfiles.service docker.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/home/core/waitforfile.sh \
        ${REGISTRYIMG_DIR}/registry.tar
        ExecStart=/usr/bin/docker load --input \
        ${REGISTRYIMG_DIR}/registry.tar
        
       
    - name: registry.service #
      command: start
      enable: true
      content: |
        [Unit]
        Description=pvt docker registry
        After=   docker.service projectfiles.service loadregimg.service weave.service
        Requires=docker.service projectfiles.service loadregimg.service weave.service

        [Service]
        KillMode=none
        #no timeout
        TimeoutStartSec=0
        Restart=on-failure
        #ExecStartPre=/etc/profile.d/sys_env.sh
        #EnvironmentFile=/home/core/sys.env
        ExecStartPre=/usr/bin/mkdir -p ${REGISTRYDATA_DIR}
        ExecStartPre=-/usr/bin/sh -c 'eval $(/opt/bin/weave env) && \
        /usr/bin/docker kill registry'
        ExecStartPre=-/usr/bin/sh -c 'eval $(/opt/bin/weave env) && \
        /usr/bin/docker rm -f registry'
        #${REGISTRY_WNET} backslash
        #ExecStartPre=/usr/bin/sh -c '/usr/bin/docker run backslash
        ExecStartPre=-/usr/bin/sh -c 'eval $(/opt/bin/weave env) && \
        /opt/bin/weave run \
        ${REGISTRY_WNET} \
        --name registry \
        -v ${REGISTRYDATA_DIR}:/var/lib/registry \
        -d \
        -p 5000:5000 \
        distribution/registry '
        ExecStart=/usr/bin/sh -c 'eval $(/opt/bin/weave env) && \
        /usr/bin/docker logs -f registry'
        ExecStop=/usr/bin/sh -c 'eval $(/opt/bin/weave env) && \
        /usr/bin/docker stop registry'

    - name: updateregistryimg.service 
      command: start
      enable: true
      content: |
        [Unit]
        Description=update registry image in bootstrap dir
        Requires=registry.service
        After=   registry.service
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=${PROJECT_DIR}/setup/registry_img.sh
        
        
    - name: fileshare.service 
      command: start
      enable: true
      content: |
        [Unit]
        Description= nfs share for my project files
        Requires=registry.service
        After=   registry.service

        #
        [Service]
        KillMode=none
        #no timeout
        TimeoutStartSec=0
        Restart=on-failure
        #and you need to: modprobe nfs; modprobe nfsd; but im not using this
        #ExecStartPre=/etc/profile.d/sys_env.sh
        #EnvironmentFile=/home/core/sys.env
        ExecStartPre=-/usr/bin/sh -c 'eval $(/opt/bin/weave env) && \
        /usr/bin/docker kill nfs-server'
        ExecStartPre=/usr/sbin/modprobe nfs
        ExecStartPre=/usr/sbin/modprobe nfsd
        ExecStartPre=-/usr/bin/sh -c 'eval $(/opt/bin/weave env) && \
        /usr/bin/docker rm -f nfs-server'
        #${REGISTRY_WNET} backslash
        #ExecStartPre=/usr/bin/sh -c '/usr/bin/docker run backslash
        ExecStartPre=-/usr/bin/sh -c 'eval $(/opt/bin/weave env) && \
        /opt/bin/weave run \
        ${FILESHARE_WNET} \
        --name nfs-server \
        --privileged \
        -d \
        -v /tsad-proj:/tsad-proj \
        nfs-server /tsad-proj '
        ExecStart=/usr/bin/sh -c 'eval $(/opt/bin/weave env) && \
        /usr/bin/docker logs -f nfs-server'
        ExecStop=/usr/bin/sh -c 'eval $(/opt/bin/weave env) && \
        /usr/bin/docker stop nfs-server'

#todo: file share make a var out of the file share pth

    - name: swap.service
      command: start
      content: |
        [Unit]
        Description=Turn on swap
        
        [Service]
        Type=oneshot
        Environment="SWAPFILE=/${SWP_GB}GiB.swap"
        RemainAfterExit=true
        ExecStartPre=/bin/bash -c "\
        fallocate -l ${SWP_GB}G $SWAPFILE && \
        chmod 600 $SWAPFILE && \
        chattr +C $SWAPFILE && \
        mkswap $SWAPFILE && \
        losetup -f $SWAPFILE"
        ExecStart=/usr/bin/sh -c "/sbin/swapon $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)"
        ExecStop=/usr/bin/sh -c "/sbin/swapoff $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)"
        ExecStopPost=/usr/bin/sh -c "/usr/sbin/losetup -d $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)"

        [Install]
        WantedBy=local.target
   