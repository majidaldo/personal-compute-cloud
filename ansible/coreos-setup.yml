---

- hosts: localhost
  gather_facts: false
  vars:
    cosc: "{{coreos_config}}"

  pre_tasks:
    - name: get nfs share path from init machine
      delegate_to: init
      shell: |
        /usr/sbin/nfsstat -m | \
        /usr/bin/grep  -o -e ':/.*' | \
        /usr/bin/sed 's/://'
      register: nfsp
      changed_when: false
    - name: get nfs share options from init machine
      delegate_to: init
      shell: |
        /usr/sbin/nfsstat -m | \
        /usr/bin/grep  -o -e 'Flags:.*' | \
        /usr/bin/sed 's/Flags://' | \
        /usr/bin/sed 's/\t//'
      register: nfso
      changed_when: false
    - name: write nfs info to cloudconfig env file
      template: src={{project_dir}}/config/coreos/nfs.j2
               dest={{project_dir}}/config/coreos/nfs.env.tmp
      

  roles:
    
    - role: cloudconfigwriter
      write_cconfig_pth: "{{playbook_dir}}/roles/coreos-cloudconfig/templates/{{cosc}}.tmp"
      cconfig: "{{cosc}}"



- hosts: "{{coreos_hosts}}"
  gather_facts: false

  pre_tasks:

    - name: add host to coreos grp
      add_host: hostname={{inventory_hostname}}
                groups=coreos
    
    - name: get outward-facing ip #really just for vagrant machines
      shell: "python -c \"import socket; print socket.gethostbyname('{{inventory_hostname}}')\""
      delegate_to: localhost 
      changed_when: false
      register: pubip
      until: pubip.stderr == "" #idk why sometimes it fails
      retries: 10
      delay: 1

      
      
  roles:
    
    - role: coreos-bootstrap
    - role: coreos-cloudconfig
      cconfig: "{{coreos_config}}"
      public_ip: "{{pubip.stdout}}"
      
  tasks:

    #coodinate weave startup
    #now that i've disabled weave on compute systemd units
    #1. start the weave unit
    #2. then weave connect compute computer from init
    #3. then conintue with starting weavedns and weaveproxy on compute
    #chk weave expose

    - name: start weave unit #just the weave unit
      service: name=weave.service      state=started
      become: yes
      become_method: sudo

    - name: weave status to see if we\'ve added the peer
      shell: /opt/bin/weave status 
      delegate_to: init
      register: ws
      changed_when: false
      tags: wc
    - name: get unique id of peer on weave
      shell: |
        #gets the unique id of the machine (better to use instead of ip)
        /opt/bin/weave status > ws.tmp && \
        /usr/bin/cat ws.tmp | \
        #want only the first (self) result hench '-m 1'
        /usr/bin/grep -m 1 -o -e 'UID[ ][0-9]*' | \
        /usr/bin/sed 's/UID //' && \
        /usr/bin/rm ws.tmp
        #does not work with piping. go figure.
      register: uid
      changed_when: false
      tags: wc
      
    - name: weave connect to peer
      shell: |
        #for when a different machine takes the same ip
        #forget shouldnt return error code
        #but anyways...weave forget is not working
        #..if host is alive!
        /opt/bin/weave forget {{pubip.stdout}} && \
        /opt/bin/weave connect {{pubip.stdout}}
      delegate_to: init
      when: "uid.stdout not in ws.stdout"
      tags: wc

    - name: start weave dns
      service: name=weavedns.service   state=started
      become: yes
      become_method: sudo
    - name: start weave proxy
      service: name=weaveproxy.service state=started
      become: yes
      become_method: sudo

    - name: weave expose so that we can have the puter see weave
      shell: source /etc/profile.d/sys_env.sh && \
             /opt/bin/weave expose ${WEAVE_CIDR}
      #not sure the weavecidr is necessary but i'm not changing it
      when: "uid.stdout not in ws.stdout"

    - name: mount my project files
      service: name=projectfiles.service state=started
      become: yes
      become_method: sudo
      
 